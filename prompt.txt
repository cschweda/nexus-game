Nexus: A Solitaire Card Game Prompt Document 

Overview
This is a web-based solitaire card game designed for a single player, with options for playing with physical decks. In this game, you build sequences of cards to reach a target number, lock sequences to secure points, and use Fixit cards to manipulate locked sequences or gain advantages.  

Your play deck is entirely facedown (like classic Solitaire) and you draw cards one by one from that deck. The Fixit deck, containing 10 cards, is kept separate, and at the start, 2 Fixit cards are revealed face up so that you know what fixes are available. Note that you do not know what card will come up next from your play deck.

Clarifications:
- Target Number: Define if this is a static value or dynamically generated.
  - Web Version: The target number is randomly generated when the app starts.
  - Physical Cards: The target number is determined by drawing random cards.
  Note: The target number is the sum of five cards, with a minimum of 5 and a maximum of 65.
- Scoring Rules: Clarify bonus points mechanism and point penalties for unused Fixit cards.
- Sequence Building: Specify valid sequences, handling duplicates and edge cases.
- Turn Mechanics: Elaborate on how and when the action phase ends, especially after a Fixit move.

Fixit Deck Details:
The Fixit deck consists of 10 special cards. Each Fixit card is single-use and must be played face down.
When you play a Fixit card, place it face down on the pile and then immediately turn it over to reveal its fix.
Once a Fixit card is played and revealed, its action is applied and your action phase ends—no further cards (normal or Fixit) can be played that turn.
Fixes may include:
1. Inserting a card into a nearly complete sequence.
2. Reordering cards if a sequence is broken.
3. Removing an unwanted card from a locked sequence.
4. Retrieving a misplayed card from the discard pile.
Pros of playing a Fixit card face down:
- Maintains suspense and strategic uncertainty, forcing you to commit before knowing the exact fix.
- Increases the challenge and potential bonus points if the revealed fix is particularly beneficial.
Cons of playing a Fixit card face down:
- The fix might turn out less advantageous than hoped, and you lose the chance for a controlled, known repair.
- May lead to accidental penalties if the fix does not match the needed repair situation.
Additionally, unused Fixit cards at the end of the game may incur a point penalty.

Game Mechanics
Build sequences of cards in ascending order
Lock sequences to secure points
Use Fixit cards to manipulate locked sequences or gain advantages
Earn bonus points for locking sequences and using Fixit cards effectively

Detailed Game State and Module Responsibilities

Game State Details:
- playDeck: Array holding the remaining cards in the play deck.
- fixitDeck: Array holding the special Fixit cards (10 cards) that can be used to repair incomplete or misplayed sequences.
- hand: Array holding the player's cards.
- lockedSequences: Array of arrays representing the sequences that have been locked.
- fixitCards: Array to track Fixit cards that have been used in a turn (since each can only be used once).
- score: Object tracking points (e.g., { player: number, bonus: number }).
- gameIsRunning: Boolean indicating whether the game loop is active.
- currentTurn: Tracks the current turn number.
- targetNumber: Defines the target value for sequences.
- actionPhaseState: Tracks the current phase of the player's turn.

Module Responsibilities:
- Deck Management: Shuffle and deal cards.
- Game State Management: Update state on card play, lock sequences.
- UI Rendering: Use Tailwind CSS for responsive design.
- Fixit Card Logic: Handle the one-time use and immediate turn ending.
- Input Processing and Validation: Handle illegal moves gracefully.

Persistence Strategy:
- Critical game data (current game state, high scores) can be saved in localStorage.
  Example: localStorage.setItem('nexusGameState', JSON.stringify(gameState));
  And retrieved via JSON.parse(localStorage.getItem('nexusGameState')).
- This ensures that the game can be resumed between sessions.

Virtual Play
Use a web server, client-side JavaScript application, and database (optional)
Shuffle and deal cards using a Fisher-Yates shuffle algorithm

Physical Play
Use a physical deck of cards, playing surface, and players
Shuffle and deal cards using a manual shuffling method

UI Considerations (using Tailwind CSS):
- Tailwind CSS can be integrated in the project's index.html to build a modern UI.
- Use Tailwind's utility classes for responsive elements including card displays,
  game boards, and interactive buttons.

Modular Architecture:
This project should be built using ES6 modules wherever possible. Each module (for example, modules for deck management, game state management, UI rendering, and Fixit card logic) should reside in its own file, ideally within a dedicated scripts directory (e.g., /home/cschw/webdev/nexus-game/src/scripts). The index.html should only serve as the shell that loads these modules using <script type="module">. Similarly, separate CSS files should handle styling and be imported as needed. This modular approach helps manage complexity, improve maintainability, and facilitate testing.

Testing and Validation

Automated tests should cover:
- Shuffling randomness.
- Proper card dealing.
- State updates on card plays.
- Correct termination of turn after a Fixit card.
- Persistence via localStorage.

Pseudo Code Implementation

## Pseudocode Implementation

// Initialize game resources:
  - Create a 52-card play deck with card properties that is entirely facedown.
  - Create a 10-card Fixit deck with fixed actions; these Fixit cards are drawn face up.
  - Shuffle both decks using a Fisher-Yates algorithm.
  - **Do not deal a hand from the play deck**; instead, the player holds the entire deck and draws one card per turn.
  - From the Fixit deck, reveal 2 cards face up (pre-dealt Fixit cards).
  - For web: set targetNumber = randomly generated number when the app starts.
  - For physical cards: targetNumber = sum(randomly drawn cards).
  - Initialize game state variables (e.g., currentTurn, score, target number, etc.).

// Main Game Loop:
WHILE gameIsRunning:
  // UI Rendering:
    - Render player's hand.
    - Render locked sequences.
    - Display current score and remaining cards in the play deck.
  
  // Input Processing:
    - Wait for player's input (e.g., mouse click or key press).
    - IF input is "playCard":
         - Prompt player to select a card from their hand.
         - Validate move: check if the selected card can extend or complete a valid sequence.
         - IF valid:
              - Update game state with the played card.
              - Log the event.
              - Provide positive feedback to the player.
         - ELSE:
              - Notify the player of the invalid move (without updating state).
    - ELSE IF input is "playFixit":
         - Check if pre-dealt Fixit hand is not empty.
         - IF available:
              - Remove one Fixit card from the Fixit hand.
              - Reveal the card’s action.
              - Apply the Fixit action (insertion, reorder, remove, or retrieval) on the target sequence.
              - Mark the Fixit card as used.
              - Log the event.
              - Terminate the current action phase immediately.
         - ELSE:
              - Notify the player that no Fixit cards are available.
  
  // State Update & Turn Transition:
    - Check win conditions: verify if locked sequences meet or exceed targetNumber.
    - Check loss conditions: if play deck and player's hand are empty without meeting the target.
    - IF neither condition is met:
         - Optionally deal additional cards if player's hand is below threshold.
         - Increment currentTurn.
         - Reset temporary turn values.
  
// End of Game Loop:
  - Finalize game state (final score, statistics).
  - Prompt player to restart or exit.

## Modular File Structure and Main Entry Point

This project follows a modular architecture using ES6 modules.
The primary entry point is not at the project root but inside the /src directory.
The index.html file (located at the project root) will load the main entry point as follows:
   <script type="module" src="./src/main.js"></script>

Proposed File Structure:
  /home/cschw/webdev/nexus-game/
    ├── package.json
    ├── vite.config.js
    ├── index.html            // References main.js as the app entry point
    ├── /src
    │     ├── main.js         // Main entry point that initializes the game
    │     └── modules         // Contains separated logic modules:
    │           ├── deckManager.js      // Functions for shuffling and dealing cards
    │           ├── gameState.js        // Functions for state management (updates, turn handling)
    │           ├── uiRenderer.js       // Functions for rendering the UI using Tailwind CSS
    │           └── fixitLogic.js       // Functions for handling Fixit card moves and immediate turn termination
    └── /public
          └── (static assets)

In main.js, import the necessary functions from the modules, for example:
   import { shuffleDeck, dealCards } from './modules/deckManager.js';
   import { initGameState } from './modules/gameState.js';
   import { renderGameState } from './modules/uiRenderer.js';
   import { applyFixitMove } from './modules/fixitLogic.js';
Then proceed to initialize the game state, render the UI, and handle user inputs.

This separation of concerns through modularity enhances maintainability, testing, 
and future scalability of the project.

## Basic Game Rules

- The objective is to build ascending sequences of cards that add up to a defined target number.
  - The target number is randomly generated in the web version by selecting five cards face down from a shuffled deck and summing their values.
  - The minimum possible target is 5 (if all selected cards have a value of 1) and the maximum is 65 (if all selected cards are 13).
  - When playing with physical cards, these same limits apply.
- At the start, the game shuffles a 52-card play deck (entirely facedown) and a 10-card Fixit deck.
- The player holds the complete play deck and draws one card at a time.
- The Fixit cards are kept apart, with 2 cards revealed face up at the start.
- On a player's turn, they may choose one of two actions:
  1. Draw the top card from the facedown play deck to continue or complete a sequence.
     - The drawn card is used immediately to build or extend a sequence, and the game state updates accordingly.
  2. Play a Fixit card from the pre-dealt Fixit hand.
     - Fixit cards are drawn face up, so the available actions are known.
     - Once a Fixit card is played (after revealing its effect), its action (insert, reorder, remove, or retrieve) is applied immediately.
     - The use of a Fixit card immediately terminates the current action phase.
- Locked sequences earn points, with bonus points awarded for efficient use of Fixit cards.
- Illegal moves, such as playing a card that does not fit into a sequence, are blocked and leave the game state unchanged.
- Win/Loss Conditions:
  - The player wins by successfully locking sequences that meet or exceed the target number while following all game rules.
    - (Clarification needed: You may further specify that each locked sequence must contain at least three cards or follow another criterion.)
  - The game is lost if the play deck and hand are exhausted without meeting the target number or if an illegal move is made that disrupts game flow.
- Persisting the game state via localStorage enables game sessions to be resumed later.

## Game Mechanics and Key Rules

- **Sequence Building:**  
  Create sequences by arranging cards in ascending order. Clarify how duplicates or near-complete sequences are handled.
  
- **Locking Mechanism:**  
  Lock sequences to secure points, with bonus points for effective strategy.

- **Fixit Cards:**  
  A total of 10 Fixit cards are available. These cards are drawn face up, so the player knows what fixes are available, whereas the player's own play deck is kept facedown to preserve uncertainty about the next card.
  - When played, a Fixit card is placed face down, then immediately revealed.
  - Its action (e.g., inserting, reordering, removing, or retrieving a card) is applied, and the turn ends immediately.

Scoring and Endgame Conditions:
- The game ends when the play deck is exhausted and the player's hand is empty, or when no legal moves are available.
- At game end, the score is computed by:
      * Summing points from locked sequences that meet or exceed the target number.
      * Adding bonus points for effective use of Fixit cards.
      * Subtracting penalty points for any remaining cards in the player's hand (if applicable).
- In a series of games (for example, 10 games), the goal is to achieve the lowest cumulative score.
- For the web version, a real-time dashboard should display metrics such as: cards left in the play deck, current score (with bonus/penalty details), turn count, and other relevant statistics.
- Physical play requires tracking these metrics manually.
